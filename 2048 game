# build 2048 in python using pygame!!
import pygame
import random
import sys

pygame.init()
pygame.font.init()

# initial set up
WIDTH = 530
HEIGHT = 650
GRID_SIZE = 5
GRID_CELL_SIZE = 100
screen = pygame.display.set_mode([WIDTH, HEIGHT])
pygame.display.set_caption('2048 GAME')
timer = pygame.time.Clock()
fps = 60
font = pygame.font.Font('freesansbold.ttf', 26)

# intro page
cover_image = pygame.image.load('C:\\Users\\ssadh\\Pictures\\WALLPAPERS\\printrest1.jpg')
cover_image = pygame.transform.scale(cover_image, (WIDTH, HEIGHT))
cover_rect = cover_image.get_rect()
cover_font = pygame.font.Font('freesansbold.ttf', 75)
text_surface = cover_font.render('2048 GAME', True, (0, 0, 0))
text_rect = text_surface.get_rect(center=(WIDTH // 2, HEIGHT // 2))
in_cover_page = True

# Cover page loop
while in_cover_page:
    screen.blit(cover_image, cover_rect)
    screen.blit(text_surface, text_rect)
    pygame.display.flip()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        elif event.type == pygame.KEYUP:
            if event.key == pygame.K_RETURN:
                in_cover_page = False

# 2048 game color library
colors = {0: (204, 192, 179),
          2: (238, 228, 218),
          4: (237, 224, 200),
          8: (242, 177, 121),
          16: (245, 149, 99),
          32: (246, 124, 95),
          64: (246, 94, 59),
          128: (237, 207, 114),
          256: (237, 204, 97),
          512: (237, 200, 80),
          1024: (237, 197, 63),
          2048: (237, 194, 46),
          'light text': (249, 246, 242),
          'dark text': (119, 110, 101),
          'other': (0, 0, 0),
          'bg': (187, 173, 160)}

# game variables initialize
board_values = [[0 for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
game_over = False
spawn_new = True
init_count = 0
direction = ''
score = 0
file = open('highscore', 'r')
init_high = int(file.readline())
file.close()
high_score = init_high


# draw game over and restart text
def draw_over():
    pygame.draw.rect(screen, 'red', [50, 50, WIDTH - 100, HEIGHT - 100], 0, 10)
    game_over_text1 = font.render('GAME OVER!!!', True, 'white')
    game_over_text2 = font.render('Press Enter to Restart', True, 'white')
    screen.blit(game_over_text1, (WIDTH // 2 - 70, HEIGHT // 2 - 30))
    screen.blit(game_over_text2, (WIDTH // 2 - 140, HEIGHT // 2 + 10))


# take your turn based on direction
def take_turn(direc, board):
    global score
    merged = [[False for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
    if direc == 'UP':
        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                shift = 0
                if i > 0:
                    for q in range(i):
                        if board[q][j] == 0:
                            shift += 1
                    if shift > 0:
                        board[i - shift][j] = board[i][j]
                        board[i][j] = 0
                    if board[i - shift - 1][j] == board[i - shift][j] and not merged[i - shift][j] \
                            and not merged[i - shift - 1][j]:
                        board[i - shift - 1][j] *= 2
                        score += board[i - shift - 1][j]
                        board[i - shift][j] = 0
                        merged[i - shift - 1][j] = True

    elif direc == 'DOWN':
        for i in range(GRID_SIZE - 1):
            for j in range(GRID_SIZE):
                shift = 0
                for q in range(i + 1):
                    if board[GRID_SIZE - 1 - q][j] == 0:
                        shift += 1
                if shift > 0:
                    board[GRID_SIZE - 2 - i + shift][j] = board[GRID_SIZE - 2 - i][j]
                    board[GRID_SIZE - 2 - i][j] = 0
                if GRID_SIZE - 1 - i + shift <= GRID_SIZE - 1:
                    if board[GRID_SIZE - 2 - i + shift][j] == board[GRID_SIZE - 1 - i + shift][j] and \
                            not merged[GRID_SIZE - 1 - i + shift][j] and not merged[GRID_SIZE - 2 - i + shift][j]:
                        board[GRID_SIZE - 1 - i + shift][j] *= 2
                        score += board[GRID_SIZE - 1 - i + shift][j]
                        board[GRID_SIZE - 2 - i + shift][j] = 0
                        merged[GRID_SIZE - 1 - i + shift][j] = True

    elif direc == 'LEFT':
        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                shift = 0
                for q in range(j):
                    if board[i][q] == 0:
                        shift += 1
                if shift > 0:
                    board[i][j - shift] = board[i][j]
                    board[i][j] = 0
                if board[i][j - shift] == board[i][j - shift - 1] and not merged[i][j - shift - 1] \
                        and not merged[i][j - shift]:
                    board[i][j - shift - 1] *= 2
                    score += board[i][j - shift - 1]
                    board[i][j - shift] = 0
                    merged[i][j - shift - 1] = True

    elif direc == 'RIGHT':
        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                shift = 0
                for q in range(j):
                    if board[i][GRID_SIZE - 1 - q] == 0:
                        shift += 1
                if shift > 0:
                    board[i][GRID_SIZE - 1 - j + shift] = board[i][GRID_SIZE - 1 - j]
                    board[i][GRID_SIZE - 1 - j] = 0
                if GRID_SIZE - j + shift <= GRID_SIZE - 1:
                    if board[i][GRID_SIZE - j + shift] == board[i][GRID_SIZE - 1 - j + shift] and \
                            not merged[i][GRID_SIZE - j + shift] and not merged[i][GRID_SIZE - 1 - j + shift]:
                        board[i][GRID_SIZE - j + shift] *= 2
                        score += board[i][GRID_SIZE - j + shift]
                        board[i][GRID_SIZE - 1 - j + shift] = 0
                        merged[i][GRID_SIZE - j + shift] = True
    return board


# spawn in new pieces randomly when turns start
def new_pieces(board):
    count = 0
    full = False
    while any(0 in row for row in board) and count < 1:
        row = random.randint(0, GRID_SIZE - 1)
        col = random.randint(0, GRID_SIZE - 1)
        if board[row][col] == 0:
            count += 1
            if random.randint(1, 10) == 10:
                board[row][col] = 4
            else:
                board[row][col] = 2
    if count < 1:
        full = True
    return board, full


# draw background for the board
def draw_board():
    pygame.draw.rect(screen, 'black', [0, 0, WIDTH, HEIGHT], 0, 10)
    font2 = pygame.font.Font('freesansbold.ttf', 36)
    score_text = font2.render(f'Score: {score}', True, 'gray')
    high_score_text = font2.render(f'High Score: {high_score}', True, 'gray')
    screen.blit(score_text, (10, HEIGHT - 125))
    screen.blit(high_score_text, (10, HEIGHT - 65))
    pass


# draw tiles for game
def draw_pieces(board):
    for i in range(GRID_SIZE):
        for j in range(GRID_SIZE):
            value = board[i][j]
            if value > 8:
                value_color = colors['light text']
            else:
                value_color = colors['dark text']
            if value <= 2048:
                color = colors[value]
            else:
                color = colors['other']
            pygame.draw.rect(screen, color, [j * GRID_CELL_SIZE + 20, i * GRID_CELL_SIZE + 20,
                                             GRID_CELL_SIZE - 10, GRID_CELL_SIZE - 10], 0, 12)
            if value > 0:
                value_len = len(str(value))
                font = pygame.font.Font('freesansbold.ttf', 48 - (5 * value_len))
                value_text = font.render(str(value), True, value_color)
                text_rect = value_text.get_rect(center=(j * GRID_CELL_SIZE + GRID_CELL_SIZE // 2,
                                                        i * GRID_CELL_SIZE + GRID_CELL_SIZE // 2))
                screen.blit(value_text, text_rect)
                pygame.draw.rect(screen, 'gray', [j * GRID_CELL_SIZE + 20, i * GRID_CELL_SIZE + 20,
                                                  GRID_CELL_SIZE - 10, GRID_CELL_SIZE - 10], 4, 12)


# main game loop
run = True
while run:
    timer.tick(fps)
    screen.fill('gray')
    draw_board()
    draw_pieces(board_values)
    if spawn_new or init_count < 2:
        board_values, game_over = new_pieces(board_values)
        spawn_new = False
        init_count += 1
    if direction != '':
        board_values = take_turn(direction, board_values)
        direction = ''
        spawn_new = True
    if game_over:
        draw_over()
        if high_score > init_high:
            file = open('highscore', 'w')
            file.write(f'{high_score}')
            file.close()
            init_high = high_score

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        if event.type == pygame.KEYUP:
            if event.key == pygame.K_UP:
                direction = 'UP'
            elif event.key == pygame.K_DOWN:
                direction = 'DOWN'
            elif event.key == pygame.K_LEFT:
                direction = 'LEFT'
            elif event.key == pygame.K_RIGHT:
                direction = 'RIGHT'

            if game_over:
                if event.key == pygame.K_RETURN:
                    board_values = [[0 for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
                    spawn_new = True
                    init_count = 0
                    score = 0
                    direction = ''
                    game_over = False

    if score > high_score:
        high_score = score

    pygame.display.flip()

pygame.quit()


